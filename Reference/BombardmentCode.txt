' ===================================================================' ---               SIMULATION GLOBAL CONSTANTS                   ---' ===================================================================' --- These constants control the balance of the entire simulation ---' --- Simulation Parameters ---Private Const CONST_REPETITIONS_PER_SCENARIO As Integer = 10Private Const CONST_MAX_TURN_COUNT As Integer = 500' --- Ship Statistics ---Private Const CONST_TRIBAL_HP As Integer = 30Private Const CONST_TRIBAL_TOTAL_SHELLS As Long = 2100Private Const CONST_TRIBAL_SHIP_COUNT As Integer = 4Private Const CONST_DREADNOUGHT_HP As Integer = 100Private Const CONST_DREADNOUGHT_TOTAL_SHELLS As Long = 1200Private Const CONST_DREADNOUGHT_SHIP_COUNT As Integer = 2' --- Target Statistics ---Private Const CONST_HP_PER_ARTILLERY As Integer = 10Private Const CONST_AMMO_THREAT_0 As Integer = 100Private Const CONST_AMMO_THREAT_1 As Integer = 200Private Const CONST_AMMO_THREAT_2 As Integer = 300' --- Initial Scenario Target Values ---Private Const CONST_MIDDELKERKE_ARTY As Integer = 25Private Const CONST_MIDDELKERKE_GARRISON As Long = 4500Private Const CONST_WESTENDE_ARTY As Integer = 20Private Const CONST_WESTENDE_GARRISON As Long = 3500Private Const CONST_NIEUWPOORT_ARTY As Integer = 30Private Const CONST_NIEUWPOORT_GARRISON As Long = 6500' --- Submarine Encounter Risk Factors (Lower is MORE dangerous) ---Private Const CONST_SUB_RISK_DREAD_FLEET_SCREEN As Integer = 100Private Const CONST_SUB_RISK_TRIBAL_FLEET_SCREEN As Integer = 25Private Const CONST_SUB_RISK_DREAD_LANDING_SCREEN As Integer = 50Private Const CONST_SUB_RISK_TRIBAL_LANDING_SCREEN As Integer = 15Private Const CONST_SUB_RISK_DREAD_NO_SCREEN As Integer = 20Private Const CONST_SUB_RISK_TRIBAL_NO_SCREEN As Integer = 5Private Const CONST_SUB_RISK_DEFAULT As Integer = 10' --- Submarine Damage Outcomes ---Private Const CONST_DREAD_SUNK_ROLL_MAX As Long = 10000Private Const CONST_TRIBAL_SUNK_ROLL_MAX As Integer = 2Private Const CONST_DREAD_DISABLED_TURNS As Integer = 100Private Const CONST_TRIBAL_DISABLED_TURNS As Integer = 9999 ' Effectively permanentPrivate Const CONST_SUNK_ROLL_SUCCESS As Integer = 1' --- Shore Battery Performance ---Private Const CONST_SHORE_BATTERY_DAMAGE As Integer = 5Private Const CONST_ARTY_HIT_CHANCE_NIGHT As Double = 0.01Private Const CONST_ARTY_HIT_CHANCE_MORNING As Double = 0.02Private Const CONST_ARTY_HIT_CHANCE_DAY As Double = 0.03Private Const CONST_ARTY_HIT_CHANCE_THREAT_MOD As Double = 0.01' --- Naval Gunnery Damage Values ---Private Const CONST_ARTY_NORMAL_HIT_DAMAGE As Integer = 2Private Const CONST_ARTY_DIRECT_HIT_MAX_DAMAGE As Integer = 10Private Const CONST_ARTY_DIRECT_HIT_MIN_DAMAGE As Integer = 7Private Const CONST_ARTY_DIRECT_HIT_MAX_DMG_CHANCE As Double = 0.5Private Const CONST_GARRISON_NORMAL_HIT_BASE_DAMAGE As Long = 5Private Const CONST_GARRISON_DIRECT_HIT_BASE_DAMAGE As Long = 50Private Const CONST_GARRISON_DMG_MULTIPLIER_DREAD As Integer = 3Private Const CONST_GARRISON_DMG_MULTIPLIER_TRIBAL As Integer = 1Private Const CONST_THREAT_REDUCTION_0 As Double = 0Private Const CONST_THREAT_REDUCTION_1 As Double = 0.25Private Const CONST_THREAT_REDUCTION_2 As Double = 0.5' --- Fire Doctrine Targeting Chances ---Private Const CONST_DOCTRINE_ARTY_FOCUS_CHANCE As Double = 0.75Private Const CONST_DOCTRINE_GARR_FOCUS_CHANCE As Double = 0.25Private Const CONST_DOCTRINE_SPLIT_FOCUS_CHANCE As Double = 0.5' --- Base Gunnery Probabilities ---Private Const CONST_BASE_MISFIRE_TRIBAL As Integer = 8Private Const CONST_BASE_DIRECT_HIT_TRIBAL As Integer = 1Private Const CONST_BASE_MISFIRE_DREAD As Integer = 2Private Const CONST_BASE_DIRECT_HIT_DREAD As Integer = 2Private Const CONST_BASE_WIDE_DAY As Integer = 15Private Const CONST_BASE_SHORT_DAY As Integer = 25Private Const CONST_BASE_ONTARGET_DAY As Integer = 33Private Const CONST_BASE_HIT_DAY As Integer = 20Private Const CONST_BASE_WIDE_NIGHT As Integer = 35Private Const CONST_BASE_SHORT_NIGHT As Integer = 35Private Const CONST_BASE_ONTARGET_NIGHT As Integer = 18Private Const CONST_BASE_HIT_NIGHT As Integer = 5Private Const CONST_BASE_WIDE_MORNING As Integer = 25Private Const CONST_BASE_SHORT_MORNING As Integer = 30Private Const CONST_BASE_ONTARGET_MORNING As Integer = 28Private Const CONST_BASE_HIT_MORNING As Integer = 10' --- Gunnery Probability Modifiers ---Private Const CONST_MOD_DREAD_WIDE As Integer = -10Private Const CONST_MOD_DREAD_HIT As Integer = 7Private Const CONST_MOD_DREAD_ONTARGET As Integer = 3Private Const CONST_MOD_BALLOON_ONTARGET As Integer = -5Private Const CONST_MOD_BALLOON_HIT As Integer = 5Private Const CONST_MOD_ISLANDS_DIRECT_HIT_MULT As Integer = 2Private Const CONST_MOD_ISLANDS_ONTARGET As Integer = -15Private Const CONST_MOD_ISLANDS_HIT As Integer = -5Private Const CONST_MOD_ISLANDS_WIDE As Integer = 10Private Const CONST_MOD_ISLANDS_SHORT As Integer = 10Private Const CONST_MOD_SYNERGY_HIT As Integer = 12 ' Morning + Balloon + Dreadnought' ===================================================================Private Type GunneryProbabilities    chanceMisFire As Integer    wideMax As Integer    shortMax As Integer    onTargetMax As Integer    hitMax As IntegerEnd TypeSub SetupWorksheet()    ' --- THIS SUBROUTINE REMAINS UNCHANGED ---    Dim ws As Worksheet    On Error Resume Next    Set ws = ThisWorkbook.Sheets("Sheet1")    If ws Is Nothing Then        MsgBox "Could not find 'Sheet1'. Please ensure it exists.", vbCritical        Exit Sub    End If    On Error GoTo 0    ws.Cells.Clear    With ws        .Range("A1:R1").Value = Array("Run #", "Simulation Count", "Time of Attack", "Spotting Method", "Fire Doctrine", "Threat Level", "Naval Support", "Q-Ships Screening", "Ship Name", "Final Status", "Shells Fired", "Misfires", "Fell Wide", "Fell Short", "On Target", "Hit", "Direct Hit", "Total Hits")        .Range("S1:AD1").Value = Array("Middelkerke Start Arty", "Middelkerke End Arty", "Middelkerke Start Gar", "Middelkerke End Gar", "Westende Start Arty", "Westende End Arty", "Westende Start Gar", "Westende End Gar", "Nieuwpoort Start Arty", "Nieuwpoort End Arty", "Nieuwpoort Start Gar", "Nieuwpoort End Gar")        .Rows(1).Font.Bold = True    End WithEnd SubSub RunAllSimulations()    Application.ScreenUpdating = False    SetupWorksheet    Randomize ' Call once at the start    ' Define all possible parameters    Dim times(1 To 3) As String, methods(1 To 3) As String, ships(1 To 2) As String    Dim qShipOptions(1 To 3) As String    Dim doctrines(1 To 3) As String    Dim threatLevels(0 To 2) As Integer        times(1) = "Day": times(2) = "Morning": times(3) = "Night"    methods(1) = "Trust in Gunners": methods(2) = "Balloons": methods(3) = "Islands"    ships(1) = "Tribal Class": ships(2) = "Dreadnought"    doctrines(1) = "Split": doctrines(2) = "Artillery": doctrines(3) = "Garrison"    threatLevels(0) = 0: threatLevels(1) = 1: threatLevels(2) = 2    qShipOptions(1) = "Fleet": qShipOptions(2) = "Landing": qShipOptions(3) = "None"    Dim scenarioID As Integer: scenarioID = 1    Dim simulationCounter As Integer: simulationCounter = 1    Dim t As Integer, m As Integer, s As Integer, q As Integer    Dim d As Integer, tl As Integer    For t = 1 To 3        For m = 1 To 3            For d = 1 To 3                For tl = 0 To 2                    For s = 1 To 2                        For q = 1 To 3                            Dim repetition As Integer                            For repetition = 1 To CONST_REPETITIONS_PER_SCENARIO                                TestScript times(t), methods(m), ships(s), qShipOptions(q), scenarioID, simulationCounter, doctrines(d), threatLevels(tl)                                simulationCounter = simulationCounter + 1                            Next repetition                            scenarioID = scenarioID + 1                        Next q                    Next s                Next tl            Next d        Next m    Next t        ThisWorkbook.Sheets("Sheet1").Columns.AutoFit    Application.ScreenUpdating = True    MsgBox "Simulation complete. " & (scenarioID - 1) & " unique scenarios run, " & (simulationCounter - 1) & " total simulations written to Sheet1."End SubSub TestScript(TimeOfAttack As String, SpottingMethod As String, navalSupport As String, qShipAssignment As String, runNum As Integer, simulationCount As Integer, FireDoctrine As String, ThreatLevel As Integer)    Dim Fleet As Collection    Dim Targets As Collection    Dim Probs As GunneryProbabilities        SetupCombatants navalSupport, ThreatLevel, Fleet, Targets    ResolveSubmarineEncounter Fleet, qShipAssignment, navalSupport    Probs = GetGunneryProbabilities(navalSupport, TimeOfAttack, SpottingMethod)    ExecuteCombatLoop Fleet, Targets, Probs, TimeOfAttack, ThreatLevel, FireDoctrine    WriteResultsToSheet Fleet, Targets, runNum, simulationCount, TimeOfAttack, SpottingMethod, FireDoctrine, ThreatLevel, navalSupport, qShipAssignmentEnd SubPrivate Sub SetupCombatants(navalSupport As String, ThreatLevel As Integer, ByRef Fleet As Collection, ByRef Targets As Collection)    Set Fleet = New Collection    Set Targets = New Collection        If navalSupport = "Tribal Class" Then        Fleet.Add CreateShip("HMS Afridi", "Tribal", CONST_TRIBAL_TOTAL_SHELLS / CONST_TRIBAL_SHIP_COUNT, CONST_TRIBAL_HP)        Fleet.Add CreateShip("HMS Cossack", "Tribal", CONST_TRIBAL_TOTAL_SHELLS / CONST_TRIBAL_SHIP_COUNT, CONST_TRIBAL_HP)        Fleet.Add CreateShip("HMS Mohawk", "Tribal", CONST_TRIBAL_TOTAL_SHELLS / CONST_TRIBAL_SHIP_COUNT, CONST_TRIBAL_HP)        Fleet.Add CreateShip("HMS Tartar", "Tribal", CONST_TRIBAL_TOTAL_SHELLS / CONST_TRIBAL_SHIP_COUNT, CONST_TRIBAL_HP)    Else ' Dreadnought        Fleet.Add CreateShip("HMS Warspite", "Dreadnought", CONST_DREADNOUGHT_TOTAL_SHELLS / CONST_DREADNOUGHT_SHIP_COUNT, CONST_DREADNOUGHT_HP)        Fleet.Add CreateShip("HMS Barham", "Dreadnought", CONST_DREADNOUGHT_TOTAL_SHELLS / CONST_DREADNOUGHT_SHIP_COUNT, CONST_DREADNOUGHT_HP)    End If    Targets.Add CreateTarget("Middelkerke Bains", CONST_MIDDELKERKE_ARTY, CONST_MIDDELKERKE_GARRISON, ThreatLevel)    Targets.Add CreateTarget("Westende Bains", CONST_WESTENDE_ARTY, CONST_WESTENDE_GARRISON, ThreatLevel)    Targets.Add CreateTarget("Nieuwpoort Bains", CONST_NIEUWPOORT_ARTY, CONST_NIEUWPOORT_GARRISON, ThreatLevel)End SubPrivate Sub ResolveSubmarineEncounter(ByRef Fleet As Collection, qShipAssignment As String, navalSupport As String)    Dim encounterRiskFactor As Long    Select Case qShipAssignment        Case "Fleet"            If navalSupport = "Dreadnought" Then encounterRiskFactor = CONST_SUB_RISK_DREAD_FLEET_SCREEN Else encounterRiskFactor = CONST_SUB_RISK_TRIBAL_FLEET_SCREEN        Case "Landing"            If navalSupport = "Dreadnought" Then encounterRiskFactor = CONST_SUB_RISK_DREAD_LANDING_SCREEN Else encounterRiskFactor = CONST_SUB_RISK_TRIBAL_LANDING_SCREEN        Case "None"            If navalSupport = "Dreadnought" Then encounterRiskFactor = CONST_SUB_RISK_DREAD_NO_SCREEN Else encounterRiskFactor = CONST_SUB_RISK_TRIBAL_NO_SCREEN        Case Else             encounterRiskFactor = CONST_SUB_RISK_DEFAULT    End Select        If Int((encounterRiskFactor * Rnd) + 1) = CONST_SUNK_ROLL_SUCCESS Then        Dim targetIndex As Integer: targetIndex = Int((Fleet.Count * Rnd) + 1)        Dim targetShip As CShip: Set targetShip = Fleet(targetIndex)        ApplySubmarineDamage targetShip    End IfEnd SubPrivate Sub ApplySubmarineDamage(ByRef targetShip As CShip)    Dim outcomeRoll As Long    If targetShip.Class = "Dreadnought" Then        outcomeRoll = Int((CONST_DREAD_SUNK_ROLL_MAX * Rnd) + 1)        If outcomeRoll = CONST_SUNK_ROLL_SUCCESS Then            targetShip.Status = "Sunk"        Else            targetShip.Status = "Disabled"            targetShip.DisabledTurnsRemaining = CONST_DREAD_DISABLED_TURNS        End If    Else ' Tribal Class        outcomeRoll = Int((CONST_TRIBAL_SUNK_ROLL_MAX * Rnd) + 1)        If outcomeRoll = CONST_SUNK_ROLL_SUCCESS Then            targetShip.Status = "Sunk"        Else            targetShip.Status = "Disabled"            targetShip.DisabledTurnsRemaining = CONST_TRIBAL_DISABLED_TURNS        End If    End IfEnd SubPrivate Sub ApplyDamage(ByRef shipWhoFired As CShip, ByRef target As cTarget, hitType As String, doctrine As String, threat As Integer)    Dim targetIsArtillery As Boolean    Dim chance As Double: chance = Rnd()        Select Case doctrine        Case "Artillery":            If chance <= CONST_DOCTRINE_ARTY_FOCUS_CHANCE Then targetIsArtillery = True Else targetIsArtillery = False        Case "Garrison":            If chance <= CONST_DOCTRINE_GARR_FOCUS_CHANCE Then targetIsArtillery = True Else targetIsArtillery = False        Case "Split":            If chance <= CONST_DOCTRINE_SPLIT_FOCUS_CHANCE Then targetIsArtillery = True Else targetIsArtillery = False    End Select        If targetIsArtillery Then        If hitType = "Normal" Then            target.ArtilleryHP = target.ArtilleryHP - CONST_ARTY_NORMAL_HIT_DAMAGE        Else ' Direct Hit            If Rnd() < CONST_ARTY_DIRECT_HIT_MAX_DMG_CHANCE Then                target.ArtilleryHP = target.ArtilleryHP - CONST_ARTY_DIRECT_HIT_MAX_DAMAGE            Else                target.ArtilleryHP = target.ArtilleryHP - CONST_ARTY_DIRECT_HIT_MIN_DAMAGE            End If        End If        If target.ArtilleryHP < 0 Then target.ArtilleryHP = 0    Else        Dim baseDamage As Long        If hitType = "Normal" Then            baseDamage = CONST_GARRISON_NORMAL_HIT_BASE_DAMAGE        Else ' Direct Hit            baseDamage = CONST_GARRISON_DIRECT_HIT_BASE_DAMAGE        End If                Dim shipClassMultiplier As Integer        If shipWhoFired.Class = "Dreadnought" Then            shipClassMultiplier = CONST_GARRISON_DMG_MULTIPLIER_DREAD        Else ' Tribal Class            shipClassMultiplier = CONST_GARRISON_DMG_MULTIPLIER_TRIBAL        End If                Dim threatPenalty As Double        Select Case threat            Case 1: threatPenalty = CONST_THREAT_REDUCTION_1            Case 2: threatPenalty = CONST_THREAT_REDUCTION_2            Case Else: threatPenalty = CONST_THREAT_REDUCTION_0        End Select                Dim finalDamage As Long        finalDamage = (baseDamage * shipClassMultiplier) * (1 - threatPenalty)        target.Garrison = target.Garrison - finalDamage        If target.Garrison < 0 Then target.Garrison = 0    End IfEnd SubPrivate Function GetGunneryProbabilities(navalSupport As String, TimeOfAttack As String, SpottingMethod As String) As GunneryProbabilities    Dim Probs As GunneryProbabilities    Dim chanceMisFire As Integer, chanceDirectHit As Integer, chanceWide As Integer, chanceShort As Integer, chanceOnTarget As Integer, chanceHit As Integer    ' --- Base Probabilities ---    Select Case navalSupport        Case "Tribal Class": chanceMisFire = CONST_BASE_MISFIRE_TRIBAL: chanceDirectHit = CONST_BASE_DIRECT_HIT_TRIBAL        Case "Dreadnought": chanceMisFire = CONST_BASE_MISFIRE_DREAD: chanceDirectHit = CONST_BASE_DIRECT_HIT_DREAD    End Select    Select Case TimeOfAttack        Case "Day": chanceWide = CONST_BASE_WIDE_DAY: chanceShort = CONST_BASE_SHORT_DAY: chanceOnTarget = CONST_BASE_ONTARGET_DAY: chanceHit = CONST_BASE_HIT_DAY        Case "Night": chanceWide = CONST_BASE_WIDE_NIGHT: chanceShort = CONST_BASE_SHORT_NIGHT: chanceOnTarget = CONST_BASE_ONTARGET_NIGHT: chanceHit = CONST_BASE_HIT_NIGHT        Case Else: chanceWide = CONST_BASE_WIDE_MORNING: chanceShort = CONST_BASE_SHORT_MORNING: chanceOnTarget = CONST_BASE_ONTARGET_MORNING: chanceHit = CONST_BASE_HIT_MORNING    End Select    ' --- Modifiers ---    If navalSupport = "Dreadnought" Then        chanceWide = chanceWide + CONST_MOD_DREAD_WIDE: chanceHit = chanceHit + CONST_MOD_DREAD_HIT: chanceOnTarget = chanceOnTarget + CONST_MOD_DREAD_ONTARGET    End If    Select Case SpottingMethod        Case "Balloons":            If chanceOnTarget >= Abs(CONST_MOD_BALLOON_ONTARGET) Then chanceOnTarget = chanceOnTarget + CONST_MOD_BALLOON_ONTARGET: chanceHit = chanceHit + CONST_MOD_BALLOON_HIT        Case "Islands":            Dim directHitIncrease As Integer: directHitIncrease = chanceDirectHit * CONST_MOD_ISLANDS_DIRECT_HIT_MULT            If chanceHit >= (directHitIncrease + Abs(CONST_MOD_ISLANDS_HIT)) Then                chanceDirectHit = chanceDirectHit + directHitIncrease: chanceHit = chanceHit - directHitIncrease                chanceOnTarget = chanceOnTarget + CONST_MOD_ISLANDS_ONTARGET: chanceHit = chanceHit + CONST_MOD_ISLANDS_HIT                chanceWide = chanceWide + CONST_MOD_ISLANDS_WIDE: chanceShort = chanceShort + CONST_MOD_ISLANDS_SHORT            End If    End Select    If TimeOfAttack = "Morning" And SpottingMethod = "Balloons" And navalSupport = "Dreadnought" Then        If chanceShort >= CONST_MOD_SYNERGY_HIT Then chanceHit = chanceHit + CONST_MOD_SYNERGY_HIT: chanceShort = chanceShort - CONST_MOD_SYNERGY_HIT    End If        Probs.chanceMisFire = chanceMisFire    Probs.wideMax = chanceMisFire + chanceWide    Probs.shortMax = Probs.wideMax + chanceShort    Probs.onTargetMax = Probs.shortMax + chanceOnTarget    Probs.hitMax = Probs.onTargetMax + chanceHit        GetGunneryProbabilities = ProbsEnd FunctionPrivate Sub ExecuteCombatLoop(ByRef Fleet As Collection, ByRef Targets As Collection, Probs As GunneryProbabilities, TimeOfAttack As String, ThreatLevel As Integer, FireDoctrine As String)    Dim turnCount As Integer: turnCount = 0    Dim battleContinues As Boolean: battleContinues = True        While battleContinues And turnCount < CONST_MAX_TURN_COUNT        turnCount = turnCount + 1                Dim activeTargets As New Collection        Dim tempTarget As cTarget        For Each tempTarget In Targets            If tempTarget.Status <> "Destroyed" Then activeTargets.Add tempTarget        Next tempTarget        Dim shipToFire As CShip        If activeTargets.Count > 0 Then            For Each shipToFire In Fleet                If shipToFire.Status = "Ready" And shipToFire.ShellsFired < shipToFire.ShellsToFire Then                    Dim currentTarget As cTarget: Set currentTarget = activeTargets(Int((activeTargets.Count * Rnd) + 1))                    shipToFire.ShellsFired = shipToFire.ShellsFired + 1                    Dim rndChance As Integer: rndChance = Int((100 * Rnd) + 1)                                        Select Case rndChance                        Case 1 To Probs.chanceMisFire: shipToFire.resMisFire = shipToFire.resMisFire + 1                        Case (Probs.chanceMisFire + 1) To Probs.wideMax: shipToFire.resFallsWide = shipToFire.resFallsWide + 1                        Case (Probs.wideMax + 1) To Probs.shortMax: shipToFire.resFallsShort = shipToFire.resFallsShort + 1                        Case (Probs.shortMax + 1) To Probs.onTargetMax: shipToFire.resOnTarget = shipToFire.resOnTarget + 1                        Case (Probs.onTargetMax + 1) To Probs.hitMax                            shipToFire.resHit = shipToFire.resHit + 1                            ApplyDamage shipToFire, currentTarget, "Normal", FireDoctrine, ThreatLevel                        Case (Probs.hitMax + 1) To 100                            shipToFire.resDirectHit = shipToFire.resDirectHit + 1                            ApplyDamage shipToFire, currentTarget, "Direct", FireDoctrine, ThreatLevel                    End Select                End If            Next shipToFire        End If        Dim artilleryHitChance As Double        Select Case TimeOfAttack            Case "Night": artilleryHitChance = CONST_ARTY_HIT_CHANCE_NIGHT            Case "Morning": artilleryHitChance = CONST_ARTY_HIT_CHANCE_MORNING            Case Else: artilleryHitChance = CONST_ARTY_HIT_CHANCE_DAY        End Select        artilleryHitChance = artilleryHitChance + (ThreatLevel * CONST_ARTY_HIT_CHANCE_THREAT_MOD)                Dim shoreBattery As cTarget        For Each shoreBattery In Targets            If shoreBattery.Status <> "Destroyed" And shoreBattery.Ammunition > 0 Then                Dim activeGuns As Integer: activeGuns = Application.WorksheetFunction.Ceiling(shoreBattery.ArtilleryHP / CONST_HP_PER_ARTILLERY, 1)                Dim gun As Integer                For gun = 1 To activeGuns                    If shoreBattery.Ammunition > 0 Then                        shoreBattery.Ammunition = shoreBattery.Ammunition - 1                        If Rnd() <= artilleryHitChance Then                            Dim shipIndex As Integer: shipIndex = Int((Fleet.Count * Rnd) + 1)                            Dim targetShip As CShip: Set targetShip = Fleet(shipIndex)                            If targetShip.Status <> "Sunk" Then targetShip.HitPoints = targetShip.HitPoints - CONST_SHORE_BATTERY_DAMAGE                        End If                    End If                Next gun            End If        Next shoreBattery                Dim activeShips As Integer: activeShips = 0        Dim totalShellsRemaining As Long: totalShellsRemaining = 0        For Each shipToFire In Fleet            If shipToFire.HitPoints <= 0 And shipToFire.Status <> "Sunk" Then shipToFire.Status = "Sunk"            If shipToFire.Status = "Disabled" Then                shipToFire.DisabledTurnsRemaining = shipToFire.DisabledTurnsRemaining - 1                If shipToFire.DisabledTurnsRemaining <= 0 Then shipToFire.Status = "Ready"            End If            If shipToFire.Status <> "Sunk" Then                activeShips = activeShips + 1                totalShellsRemaining = totalShellsRemaining + (shipToFire.ShellsToFire - shipToFire.ShellsFired)            End If        Next shipToFire                Dim totalActiveGuns As Long: totalActiveGuns = 0        For Each shoreBattery In Targets            If shoreBattery.ArtilleryHP <= 0 And shoreBattery.Status <> "Destroyed" Then shoreBattery.Status = "Destroyed"            If shoreBattery.Status <> "Destroyed" Then                totalActiveGuns = totalActiveGuns + Application.WorksheetFunction.Ceiling(shoreBattery.ArtilleryHP / CONST_HP_PER_ARTILLERY, 1)            End If        Next shoreBattery                If activeShips = 0 Or totalActiveGuns = 0 Or totalShellsRemaining <= 0 Then            battleContinues = False        End If    WendEnd SubPrivate Sub WriteResultsToSheet(Fleet As Collection, Targets As Collection, runNum As Integer, simulationCount As Integer, TimeOfAttack As String, SpottingMethod As String, FireDoctrine As String, ThreatLevel As Integer, navalSupport As String, qShipsScreening As String)    Dim ws As Worksheet, nextRow As Long    Set ws = ThisWorkbook.Sheets("Sheet1")        Dim mEndArty As Integer, mEndGar As Long    Dim wEndArty As Integer, wEndGar As Long    Dim nEndArty As Integer, nEndGar As Long        mEndArty = Application.WorksheetFunction.Ceiling(Targets(1).ArtilleryHP / CONST_HP_PER_ARTILLERY, 1)    mEndGar = Targets(1).Garrison    wEndArty = Application.WorksheetFunction.Ceiling(Targets(2).ArtilleryHP / CONST_HP_PER_ARTILLERY, 1)    wEndGar = Targets(2).Garrison    nEndArty = Application.WorksheetFunction.Ceiling(Targets(3).ArtilleryHP / CONST_HP_PER_ARTILLERY, 1)    nEndGar = Targets(3).Garrison    Dim shipToWrite As CShip    For Each shipToWrite In Fleet        nextRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row + 1        With ws            .Cells(nextRow, 1).Value = runNum            .Cells(nextRow, 2).Value = simulationCount            .Cells(nextRow, 3).Value = TimeOfAttack            .Cells(nextRow, 4).Value = SpottingMethod            .Cells(nextRow, 5).Value = FireDoctrine            .Cells(nextRow, 6).Value = ThreatLevel            .Cells(nextRow, 7).Value = navalSupport            .Cells(nextRow, 8).Value = qShipsScreening            .Cells(nextRow, 9).Value = shipToWrite.Name            .Cells(nextRow, 10).Value = shipToWrite.Status            .Cells(nextRow, 11).Value = shipToWrite.ShellsFired            .Cells(nextRow, 12).Value = shipToWrite.resMisFire            .Cells(nextRow, 13).Value = shipToWrite.resFallsWide            .Cells(nextRow, 14).Value = shipToWrite.resFallsShort            .Cells(nextRow, 15).Value = shipToWrite.resOnTarget            .Cells(nextRow, 16).Value = shipToWrite.resHit            .Cells(nextRow, 17).Value = shipToWrite.resDirectHit            .Cells(nextRow, 18).Value = shipToWrite.resHit + shipToWrite.resDirectHit            .Cells(nextRow, 19).Value = Targets(1).InitialArtillery            .Cells(nextRow, 20).Value = mEndArty            .Cells(nextRow, 21).Value = Targets(1).InitialGarrison            .Cells(nextRow, 22).Value = mEndGar            .Cells(nextRow, 23).Value = Targets(2).InitialArtillery            .Cells(nextRow, 24).Value = wEndArty            .Cells(nextRow, 25).Value = Targets(2).InitialGarrison            .Cells(nextRow, 26).Value = wEndGar            .Cells(nextRow, 27).Value = Targets(3).InitialArtillery            .Cells(nextRow, 28).Value = nEndArty            .Cells(nextRow, 29).Value = Targets(3).InitialGarrison            .Cells(nextRow, 30).Value = nEndGar        End With    Next shipToWriteEnd SubPrivate Function CreateShip(Name As String, Class As String, Shells As Integer, HP As Integer) As CShip    Dim s As New CShip    s.Name = Name    s.Class = Class    s.ShellsToFire = Shells    s.HitPoints = HP    s.Status = "Ready"    Set CreateShip = sEnd FunctionPrivate Function CreateTarget(Name As String, Artillery As Integer, Garrison As Long, ThreatLevel As Integer) As cTarget    Dim t As New cTarget    t.Name = Name    t.ArtilleryPieces = Artillery    t.InitialArtillery = Artillery    t.Garrison = Garrison    t.InitialGarrison = Garrison    t.Status = "Intact"        Select Case ThreatLevel        Case 0: t.Ammunition = CONST_AMMO_THREAT_0        Case 1: t.Ammunition = CONST_AMMO_THREAT_1        Case 2: t.Ammunition = CONST_AMMO_THREAT_2        Case Else: t.Ammunition = CONST_AMMO_THREAT_0    End Select        t.ArtilleryHP = Artillery * CONST_HP_PER_ARTILLERY        Set CreateTarget = tEnd Function